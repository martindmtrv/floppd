{"version":3,"sources":["serviceWorker.js","components/PrivateRoute.jsx","components/Group.jsx","pages/GroupsPage.jsx","pages/EventCreator.jsx","pages/App.jsx","pages/Landing.jsx","index.js"],"names":["Boolean","window","location","hostname","match","PrivateRoute","Component","component","rest","render","props","sessionStorage","getItem","to","Group","params","gid","useState","admins","users","events","group","setGroup","useEffect","cb","JSON","parse","name","_id","Button","Table","map","admin","key","username","rating","user","event","date","Input","type","GroupsPage","groups","setGroups","data","exact","path","length","EventCreator","Form","FormGroup","InputGroup","className","InputGroupAddon","addonType","InputGroupText","inputProps","placeholder","App","Landing","storageVal","parseInt","login","setLogin","onClick","setItem","onSubmit","Label","for","id","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.223a3b98.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nexport default function PrivateRoute({ component: Component, ...rest }) {\n    return (\n        <Route {...rest} render={(props)=>\n            (sessionStorage.getItem('login') === \"1\" ? <Component {...props}/> : <Redirect to='/login'/>)\n        }/>\n    )\n}","import React from 'react';\nimport { useEffect, useState } from 'react';\nimport { Table, Input, Button } from 'reactstrap';\nimport { Link, Redirect } from 'react-router-dom';\n\nfunction Group({match: {params: {gid}}}){\n    const [group, setGroup] = useState({admins:[], users:[], events: []});\n\n    function fetchData(cb){\n        let data = JSON.parse('{\"admins\":[{\"_id\":\"5e448c7476e84b3589fcebe8\",\"username\":\"martin\",\"rating\":0}],\"users\":[{\"_id\":\"5e448cb456b17c3598c9f68d\",\"username\":\"martin1\",\"rating\":0}],\"_id\":\"5e448d353a76fd359fa4817c\",\"name\":\"aphas\",\"events\":[{\"name\": \"smash\", \"date\": 11111111111, \"location\": \"daniel house\", \"_id\": \"sample_ting\"}],\"__v\":2}');\n        \n        // fake async request\n        cb(data);\n    }\n\n    useEffect(()=>{\n        fetchData(group => setGroup(group));\n    }, []);\n\n    \n    return(\n        <div>\n            <h1>Group {group.name}</h1>\n            <Link to={`/groups/${group._id}/event`}><Button>Add Event</Button></Link>\n            \n\n            <h2>Members</h2>\n\n            <Table>\n                <thead>\n                    <tr>\n                        <td>Name</td>\n                        <td>Rating</td>\n                        <td>Permission</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    {group.admins.map(admin =>{\n                        return (\n                            <tr key={admin._id}>\n                                <td><Link to={'/users/'+admin._id}>{admin.username}</Link></td>\n                                <td>{admin.rating}</td>\n                                <td>Admin</td>\n                            </tr>\n                        )\n                    })}\n                    {group.users.map(user =>{\n                        return (\n                            <tr key={user._id}>\n                                <td><Link to={'/users/'+user._id}>{user.username}</Link></td>\n                                <td>{user.rating}</td>\n                                <td>User</td>\n                            </tr>\n                        )\n                    })\n                    }\n                </tbody>\n            </Table>\n            <h2>Events</h2>\n            <Table>\n                <thead>\n                    <tr>\n                        <td>Name</td>\n                        <td>Time</td>\n                        <td>Location</td>\n                        <td>Attending</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    {group.events.map(event => {\n                        return (\n                            <tr key={event._id}>\n                                <td><Link to={'/events/'+event._id}>{event.name}</Link></td>\n                                <td>{event.date}</td>\n                                <td>{event.location}</td>\n                                <td><Input type='checkbox'/></td>\n                            </tr>\n\n                        )\n                    })}\n                </tbody>\n\n            </Table>\n        </div>\n        \n    )\n}\n\nexport default Group;","import React from 'react';\nimport { useEffect, useState } from 'react';\nimport { Table } from 'reactstrap';\nimport { Link, Switch, Route } from 'react-router-dom';\nimport Group from '../components/Group';\n\nexport default function GroupsPage() {\n    const [groups, setGroups] = useState([]);\n    function fetchData(cb) {\n        // sample json response\n        let data = JSON.parse('[{ \"_id\" : \"5e448d353a76fd359fa4817c\", \"admins\" : [ \"5e448c7476e84b3589fcebe8\" ], \"users\" : [ \"5e448cb456b17c3598c9f68d\" ], \"name\" : \"aphas\", \"events\" : [{\"name\":\"Smash\"}], \"__v\" : 2 }]');\n\n        // fake async request\n        cb(data);\n    }\n\n    useEffect(() => {\n        fetchData(data => { setGroups(data) });\n    }, [])\n\n    return (\n        <Switch>\n            <Route exact path='/groups'>\n                <h1>Groups Page</h1>\n                <Table>\n                    <thead>\n                        <tr>\n                            <td>Group Name</td>\n                            <td># of users</td>\n                            <td># of admins</td>\n                            <td>Latest Event</td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {groups.map(group => {\n                            return (\n                                <tr key={group._id}>\n                                    <td><Link to={'/groups/' + group._id}>{group.name}</Link></td>\n                                    <td>{group.users.length}</td>\n                                    <td>{group.admins.length}</td>\n                                    <td>{group.events[0].name}</td>\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n                </Table>\n            </Route>\n\n            <Route exact path='/groups/:gid' component={Group} />\n        </Switch>\n    )\n}","import React from 'react';\nimport ReactDatetime from 'react-datetime';\nimport { FormGroup, InputGroup, InputGroupText, InputGroupAddon, Form, Button } from 'reactstrap';\n\nfunction EventCreator() {\n    return (\n        <Form>\n            <FormGroup>\n                <InputGroup className=\"input-group-alternative\">\n                    <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText>\n                            <i className=\"ni ni-calendar-grid-58\" />\n                        </InputGroupText>\n                    </InputGroupAddon>\n                    <ReactDatetime\n                        inputProps={{\n                            placeholder: \"Date Picker Here\"\n                        }}\n                    />\n                </InputGroup>\n                <Button>Submit</Button>\n            </FormGroup>\n        </Form>\n    )\n}\n\nexport default EventCreator;","import React from 'react';\nimport { BrowserRouter, Route, Link, Switch } from 'react-router-dom';\nimport GroupsPage from './GroupsPage';\nimport EventCreator from './EventCreator';\n\nfunction App() {\n  return (\n    <div>\n      <BrowserRouter>\n\n        <ul>\n          <li><Link to='/groups'>Groups</Link></li>\n          <li><Link to='/events'>Events</Link></li>\n        </ul>\n\n        <Switch>\n          <Route path='/groups/:gid/event' component={EventCreator} />\n          <Route path='/groups' component={GroupsPage} />\n          <Route path='/events' component={()=><h1>Events</h1>}/>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default App;","import React from 'react';\nimport { useState } from 'react';\nimport { Button, Form, FormGroup, Input, Label } from 'reactstrap';\nimport { BrowserRouter, Route, Redirect } from 'react-router-dom';\nimport PrivateRoute from '../components/PrivateRoute';\nimport App from './App';\n\nfunction Landing(){\n    let storageVal = sessionStorage.getItem('login');\n    const [login, setLogin] = useState( storageVal === null ? 0 : parseInt(storageVal));\n\n    function logout(){\n        sessionStorage.setItem('login', 0);\n        setLogin(0);\n    }\n\n    function submit(){\n        sessionStorage.setItem('login', 1);\n        // error\n\n        // send request\n        setLogin(1);\n    }\n\n    return (\n        <div>\n            <h3>Landing Wrapper</h3>\n            {(login) ? <Button onClick={logout}>Log me out!</Button> : <></>}\n            \n            <BrowserRouter>\n                <PrivateRoute path='/' component={App}/>\n                <Route path='/login'>\n                        {(login) ? (<Redirect to='/'/>) : \n                    <Form onSubmit={submit}>\n                        <FormGroup>\n                            <Label for=\"username\">Username</Label>\n                            <Input type=\"text\" name=\"username\" id=\"username\" placeholder=\"Username\" />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"pw\">Password</Label>\n                            <Input type=\"password\" name=\"pw\" id=\"pw\" placeholder=\"Password\" />\n                        </FormGroup>\n                        <Button>Submit</Button>\n                    </Form>}\n                </Route>\n            </BrowserRouter>\n        </div>\n    )\n\n}\n\nexport default Landing;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport \"./assets/vendor/nucleo/css/nucleo.css\";\nimport \"./assets/vendor/font-awesome/css/font-awesome.min.css\";\nimport \"./assets/scss/argon-design-system-react.scss\";\n\nimport Landing from './pages/Landing';\n\nReactDOM.render(<Landing />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}